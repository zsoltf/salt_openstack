heat_template_version: rocky

description: Elasticsearch Heat Template

parameters:

  ssh_key_name:
    type: string
    description: name of key pair for ssh
    default: rootkey

  salt_master:
    type: string
    description: name of salt server

  image:
    type: string
    description: name of image for server
    default: bionic

  availability_zone:
    type: string
    description: name of the availability zone
    default: nova

  public_network:
    type: string
    description: name of the public network
    default: external

  datacenter:
    type: string
    description: datacenter salt grain

  dns_nameservers:
    type: comma_delimited_list
    description: list of dns nameservers

  vip:
    type: string
    description: vip for lb

  kibana_vip:
    type: string
    description: vip for kibana

  internal_vip:
    type: string
    description: vip for lb in private network

  internal_cidr:
    type: string
    description: cidr for private network

  volume_size:
    type: number
    description: volume size for data node

  ubuntu_mirror:
    type: string
    default: http://us.archive.ubuntu.com/ubuntu/
    description: ubuntu mirror for cloud init

resources:

  net:
    type: OS::Neutron::Net

  subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: net }
      cidr: { get_param: internal_cidr }
      dns_nameservers: { get_param: dns_nameservers }
      ip_version: 4

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: { network: { get_param: public_network } }

  router-interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet: { get_resource: subnet }

  lb-https-secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 443
          port_range_max: 443

  kibana-secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 5601
          port_range_max: 5601

  internal-secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 9200
          port_range_max: 9400

  flavor:
    type: OS::Nova::Flavor
    properties:
      name: elastic-data
      ram: 16384
      vcpus: 6
      disk: 40

  master-flavor:
    type: OS::Nova::Flavor
    properties:
      name: elastic-master
      ram: 8196
      vcpus: 4
      disk: 40

  master-servergroup:
    type: OS::Nova::ServerGroup
    properties:
      name: elastic-master
      policies: [ anti-affinity ]

  master-group:
    type: OS::Heat::ResourceGroup
    properties:
      count: 3
      resource_def:
        type: OS::Nova::Server
        properties:
          availability_zone: { get_param: availability_zone }
          block_device_mapping_v2:
            - boot_index: 0
              delete_on_termination: true
              image: { get_param: image }
              volume_size: 40
          scheduler_hints: { group: { get_resource: master-servergroup } }
          flavor: { get_resource: master-flavor }
          name: elastic-master-%index%
          key_name: { get_param: ssh_key_name }
          networks:
            - network: { get_resource: net }
          security_groups:
            - default
            - {get_resource: internal-secgroup}
          user_data_format: RAW
          user_data:
            str_replace:
              template: { get_file: elastic-cloudinit.yaml }
              params:
                "$ubuntu_mirror": { get_param: ubuntu_mirror }
                "$datacenter": { get_param: datacenter }
                "$salt_master": { get_param: salt_master }
                "$salt_cmd": "salt-call state.sls elastic.elasticsearch"
                "$elastic_role": master

  data-servergroup:
    type: OS::Nova::ServerGroup
    properties:
      name: elastic-data
      policies: [soft-anti-affinity]

  data-group:
    type: OS::Heat::ResourceGroup
    depends_on:
      - internal-secgroup
    properties:
      count: 3
      resource_def:
        type: elastic-data.yaml
        properties:
          availability_zone: { get_param: availability_zone }
          group: { get_resource: data-servergroup }
          flavor: { get_resource: flavor }
          image: { get_param: image }
          name: elastic-data-%index%
          key_name: { get_param: ssh_key_name }
          network: { get_resource: net }
          subnet: {get_resource: subnet}
          security_group: {get_resource: internal-secgroup}
          pool_id: {get_resource: pool}
          metadata: {"metering.server_group": {get_param: "OS::stack_id"}}
          volume_size: {get_param: volume_size}
          user_data:
            str_replace:
              template: { get_file: elastic-data-cloudinit.yaml }
              params:
                "$ubuntu_mirror": { get_param: ubuntu_mirror }
                "$datacenter": { get_param: datacenter }
                "$salt_master": { get_param: salt_master }
                "$salt_cmd": "salt-call state.sls elastic.elasticsearch"
                "$elastic_role": data

  #node-servergroup:
  #  type: OS::Nova::ServerGroup
  #  properties:
  #    name: elastic-node
  #    policies: [soft-anti-affinity]

  #node-group:
  #  type: OS::Heat::ResourceGroup
  #  depends_on:
  #    - internal-secgroup
  #  properties:
  #    count: 3
  #    resource_def:
  #      type: elastic-data.yaml
  #      properties:
  #        availability_zone: { get_param: availability_zone }
  #        group: { get_resource: node-servergroup }
  #        flavor: { get_resource: flavor }
  #        image: { get_param: image }
  #        name: elastic-node-%index%
  #        key_name: { get_param: ssh_key_name }
  #        network: { get_resource: net }
  #        subnet: {get_resource: subnet}
  #        security_group: {get_resource: internal-secgroup}
  #        pool_id: {get_resource: pool}
  #        metadata: {"metering.server_group": {get_param: "OS::stack_id"}}
  #        volume_size: {get_param: volume_size}
  #        user_data:
  #          str_replace:
  #            template: { get_file: elastic-data-cloudinit.yaml }
  #            params:
  #              "$ubuntu_mirror": { get_param: ubuntu_mirror }
  #              "$datacenter": { get_param: datacenter }
  #              "$salt_master": { get_param: salt_master }
  #              "$salt_cmd": "salt-call state.sls elastic.elasticsearch"
  #              "$elastic_role": data

  forwarder-flavor:
    type: OS::Nova::Flavor
    properties:
      name: elastic-forwarder
      ram: 16384
      vcpus: 16
      disk: 300

  forwarder-servergroup:
    type: OS::Nova::ServerGroup
    properties:
      name: elastic-forwarder
      policies: [ anti-affinity ]

  forwarder-group:
    type: OS::Heat::ResourceGroup
    depends_on:
      - master-group
      - data-group
      #- node-group
    properties:
      count: 1
      resource_def:
        type: OS::Nova::Server
        properties:
          availability_zone: { get_param: availability_zone }
          block_device_mapping_v2:
            - boot_index: 0
              delete_on_termination: true
              image: { get_param: image }
              volume_size: 40
          scheduler_hints: { group: { get_resource: forwarder-servergroup } }
          flavor: { get_resource: forwarder-flavor }
          name: elastic-forwarder-%index%
          key_name: { get_param: ssh_key_name }
          networks:
            - network: { get_resource: net }
          user_data_format: RAW
          user_data:
            str_replace:
              template: { get_file: elastic-cloudinit.yaml }
              params:
                "$ubuntu_mirror": { get_param: ubuntu_mirror }
                "$datacenter": { get_param: datacenter }
                "$salt_master": { get_param: salt_master }
                "$salt_cmd": "salt-call test.ping"
                "$elastic_role": forwarder

  kibana:
    type: OS::Nova::Server
    properties:
      availability_zone: { get_param: availability_zone }
      block_device_mapping_v2:
        - boot_index: 0
          delete_on_termination: true
          image: { get_param: image }
          volume_size: 40
      flavor: { get_resource: master-flavor }
      name: elastic-kibana
      key_name: { get_param: ssh_key_name }
      networks:
        - network: { get_resource: net }
      security_groups:
        - default
        - {get_resource: kibana-secgroup}
      user_data_format: RAW
      user_data:
        str_replace:
          template: { get_file: elastic-cloudinit.yaml }
          params:
            "$ubuntu_mirror": { get_param: ubuntu_mirror }
            "$datacenter": { get_param: datacenter }
            "$salt_master": { get_param: salt_master }
            "$salt_cmd": "salt-call state.sls elastic.kibana"
            "$elastic_role": kibana

  kibana-ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: {get_param: public_network}
      floating_ip_address: { get_param: kibana_vip }
      value_specs:
        description: 'kibana float'
        #dns_domain: 'openstack.example.com.'
        #dns_name: 'kibana'

  kibana-ip-assoc:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: {get_resource: kibana-ip}
      server_id: {get_resource: kibana}

  lb:
    type: OS::Octavia::LoadBalancer
    properties:
      vip_subnet: {get_resource: subnet}
      vip_address: {get_param: internal_vip}
  listener:
    type: OS::Octavia::Listener
    properties:
      loadbalancer: {get_resource: lb}
      protocol: TCP
      protocol_port: 9200
  listener-http:
    type: OS::Octavia::Listener
    properties:
      default_pool: {get_resource: pool}
      loadbalancer: {get_resource: lb}
      protocol: HTTP
      protocol_port: 80
  pool:
    type: OS::Octavia::Pool
    properties:
      listener: {get_resource: listener}
      lb_algorithm: ROUND_ROBIN
      protocol: HTTP
      #session_persistence:
      #  type: SOURCE_IP
  lb_monitor:
    type: OS::Octavia::HealthMonitor
    properties:
      pool: { get_resource: pool }
      type: HTTP
      url_path: /_cat/health
      delay: 5
      max_retries: 5
      timeout: 5
  # assign a floating ip address to the load balancer
  # pool.
  lb_floating:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: {get_param: public_network}
      floating_ip_address: { get_param: vip }
      port_id: {get_attr: [lb, vip_port_id]}
      value_specs:
        description: 'elastic float'
        #dns_domain: 'openstack.example.com.'
        #dns_name: 'elasticsearch'

outputs:
  master:
    description: Public IP of elastic master group
    value: { get_attr: [ master-group, first_address ] }
  data:
    description: Public IP of elastic data group
    value: { get_attr: [ data-group, first_address ] }
  pool_ip_address:
    value: {get_attr: [lb, vip_address]}
    description: The IP address of the load balancing pool
